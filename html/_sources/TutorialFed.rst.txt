Exemple de calcul de l'impôt fédéral
------------------------------------

Importation du module
^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    import srd

Intialisation d’un ménage
^^^^^^^^^^^^^^^^^^^^^^^^^

On doit d’abord initialiser un ménage. Ici nous supposerons un couple
avec deux membres ayant l’âge de 45 ans et des revenus de travail de
50,000$ et 25,000$ respectivement.

.. code:: ipython3

    jean = srd.Person(age=45,earn=50e3)
    pauline = srd.Person(age=45,earn=25e3)

On les insère dans un ménage vivant au Québec

.. code:: ipython3

    hh = srd.Hhold(jean,pauline,prov='qc')

On peut voir le profil de chacun des membres du ménage en utilisant
vars():

.. code:: ipython3

    vars(jean)




.. parsed-literal::

    {'age': 45,
     'inc_earn': 50000.0,
     'inc_rpp': 0,
     'inc_cpp': 0,
     'inc_othtax': 0,
     'inc_othntax': 0,
     'inc_rrsp': 0,
     'con_rrsp': 0,
     'years_can': None,
     'inc_self_earn': 0,
     'disabled': False,
     'cqppc': None,
     'widow': False,
     'asset': 0,
     'dc_exp0_7': 0,
     'dc_exp8_16': 0,
     'oas_years_post': 0,
     'inc_oas': 0.0,
     'inc_gis': 0.0,
     'allow_couple': 0,
     'allow_surv': 0,
     'inc_work': 50000.0,
     'inc_non_work': 0,
     'net_inc': 50000.0}



Calcul de l’impôt fédéral
^^^^^^^^^^^^^^^^^^^^^^^^^

On doit d’abord créer un rapport d’impôt pour une année en particulier.

.. code:: ipython3

    from srd import federal
    fed_form = federal.form(2020)

On peut voir les différents paramètres du système fiscal en utilisant
encore vars()

.. code:: ipython3

    vars(fed_form)




.. parsed-literal::

    {'basic_amount': 11474.0,
     'age_cred_amount': 7125.0,
     'min_age_cred': 65,
     'age_cred_exemption': 35927.0,
     'age_cred_claw_rate': 0.15,
     'pension_cred_amount': 2000.0,
     'disability_cred_amount': 8001.0,
     'rate_non_ref_tax_cred': 0.15,
     'rate_abatment_qc': 0.165,
     'nrtc_empl': 1161.0,
     'nrtc_dep_base': 11474.0,
     'rtc_gst_max': 276.0,
     'rtc_gst_max_partner': 276.0,
     'rtc_gst_max_child': 145.0,
     'rtc_gst_clawrate': 0.05,
     'rtc_gst_red': 35926.0,
     'rtc_gst_stop': 41446.0,
     'rtc_gst_ind_bonusstart': 8948.0,
     'rtc_gst_ind_bonus': 145.0,
     'rtc_gst_ind_bonusrate': 0.02,
     'chcdeduc_max_minus7': 8000.0,
     'chcdeduc_max_minus16': 5000.0,
     'chcdeduc_winc_rate': 0.666,
     'cctb_base': 1490.0,
     'cctb_supp3rd': 104.0,
     'cctb_redstart': 45282.0,
     'cctb_redrate_1ch': 0.02,
     'cctb_redrate_2chplus': 0.04,
     'ncbs_base_1ch': 2308.0,
     'ncbs_base_2nd': 2042.0,
     'ncbs_base_3rdplus': 1943.0,
     'ncbs_redrate_1ch': 0.122,
     'ncbs_redrate_2ch': 0.23,
     'ncbs_redrate_3chplus': 0.333,
     'ncbs_redstart': 26359.0,
     'uccb_amount': 960.0,
     'cctb_alb_minus7': 1375.0,
     'cctb_alb_7to11': 1468.0,
     'cctb_alb_12to15': 1643.0,
     'cctb_alb_16and17': 1739.0,
     'uccb_6_17': 360.0,
     'ccb_base_step_1': 30000.0,
     'ccb_rate_step1_1ch': 0.07,
     'ccb_rate_step1_2ch': 0.135,
     'ccb_rate_step1_3ch': 0.19,
     'ccb_rate_step1_4ch_plus': 0.23,
     'ccb_base_step_2': 65000.0,
     'ccb_rate_step2_1ch': 0.032,
     'ccb_rate_step2_2ch': 0.057,
     'ccb_rate_step2_3ch': 0.08,
     'ccb_rate_step2_4ch_plus': 0.095,
     'ccb_minus_6': 6400.0,
     'ccb_6_17': 5400.0,
     'ccb_disab': 2730.0,
     'ccb_thresh_step1': 35000.0,
     'l_brackets': [0.0, 45258.0, 90563.0, 140388.0, 200000.0],
     'l_rates': [0.15, 0.205, 0.26, 0.29, 0.33],
     'l_constant': [0.0, 6792.0, 16075.0, 29029.0, 46317.0]}



On remplit le rapport d’impôt à l’aide de la fonction file().

.. code:: ipython3

    fed_form.file(hh)

On peut visualiser un rapport d’impôt sommaire qui est rattaché à chaque
personne

.. code:: ipython3

    jean.fed_return




.. parsed-literal::

    {'gross_income': 50000.0,
     'deductions': 0.0,
     'net_income': 50000.0,
     'taxable_income': 50000.0,
     'gross_tax_liability': 7764.11,
     'non_refund_credits': 1721.1,
     'refund_credits': 997.0966500000001,
     'net_tax_liability': 5045.91335}



.. code:: ipython3

    pauline.fed_return




.. parsed-literal::

    {'gross_income': 25000.0,
     'deductions': 0.0,
     'net_income': 25000.0,
     'taxable_income': 25000.0,
     'gross_tax_liability': 3750.0,
     'non_refund_credits': 1721.1,
     'refund_credits': 334.7685,
     'net_tax_liability': 1694.1315}



Expérience
^^^^^^^^^^

On peut faire des expériences assez complexe. La première serait de
regader l’impôt fédéral payé si on incrémente les revenus de travail

.. code:: ipython3

    earns = np.linspace(10e3,200e3,100)
    atrs = []
    for earn in earns:
        jean.inc_earn = earn
        fed_form.file(hh)
        atrs.append(jean.fed_return['net_tax_liability']/jean.fed_return['gross_income'])
    from matplotlib import pyplot as plt
    plt.figure()
    plt.plot(earns,atrs)
    plt.xlabel('niveau de revenu de travail')
    plt.ylabel('taux moyen imposition effectif')
    plt.show()



.. image:: output_20_0.png


On peut aussi faire une expérience ou on change un paramètre du système
d’imposition. Supposons qu’on change le montant de base en l’augmentant

.. code:: ipython3

    base = np.linspace(1.0,1.5,10)
    atrs = []
    bases = []
    jean.inc_earn = 50e3
    base_amount = fed_form.basic_amount
    for b in base:
        fed_form.basic_amount = base_amount*b
        bases.append(fed_form.basic_amount)
        fed_form.file(hh)
        atrs.append(jean.fed_return['net_tax_liability']/jean.fed_return['gross_income'])
    from matplotlib import pyplot as plt
    plt.figure()
    plt.plot(bases,atrs)
    plt.xlabel('montant de base')
    plt.ylabel('taux moyen imposition effectif')
    plt.show()



.. image:: output_22_0.png


